{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andrey\\\\Documents\\\\weather\\\\weather-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form/form\";\nimport Weather from \"./components/weather-card/main\";\nimport \"weather-icons/css/weather-icons.css\";\nconst API_KEY = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n\n      try {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\n        const response = await api_call.json();\n        this.setState({\n          city: `${response.name}, ${response.sys.country}`,\n          country: response.sys.country,\n          main: response.weather[0].main,\n          celsius: this.getCelsius(response.main.temp),\n          description: response.weather[0].description,\n          error: false,\n          cardActive: true\n        });\n        this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n        localStorage.setItem(\"city\", JSON.stringify(city));\n      } catch (error) {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: \"\",\n      country: \"\",\n      icon: \"\",\n      main: \"\",\n      celsius: \"\",\n      description: \"\",\n      error: false,\n      cardActive: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds\n        });\n    }\n  }\n\n  getCelsius(temp) {\n    let celsius = Math.floor(temp - 273.15);\n    return celsius;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: `card ${this.state.cardActive ? \"active\" : \"\"}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: this.state.city,\n      weatherIcon: this.state.icon,\n      temp_celsius: this.state.celsius,\n      description: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), this.state.error ? React.createElement(\"div\", {\n      className: \"card-error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"City not found\")) : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/andrey/Documents/weather/weather-app/src/App.js"],"names":["React","Form","Weather","API_KEY","App","Component","constructor","getWeather","e","preventDefault","city","target","elements","value","api_call","fetch","response","json","setState","name","sys","country","main","weather","celsius","getCelsius","temp","description","error","cardActive","getWeatherIcon","weatherIcon","id","localStorage","setItem","JSON","stringify","state","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","Math","floor","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form/form\";\nimport Weather from \"./components/weather-card/main\";\nimport \"weather-icons/css/weather-icons.css\";\n\nconst API_KEY = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: \"\",\n      country: \"\",\n      icon: \"\",\n      main: \"\",\n      celsius: \"\",\n      description: \"\",\n      error: false,\n      cardActive: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getCelsius(temp) {\n    let celsius = Math.floor(temp - 273.15);\n    return celsius;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    try {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.getCelsius(response.main.temp),\n        description: response.weather[0].description,\n        error: false,\n        cardActive: true\n      });\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n      localStorage.setItem(\"city\", JSON.stringify(city));\n    } catch (error) {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className={`card ${this.state.cardActive ? \"active\" : \"\"}`}>\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          cityname={this.state.city}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          description={this.state.description}\n        />\n        {this.state.error ? (\n          <div className=\"card-error\">\n            <p>City not found</p>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}